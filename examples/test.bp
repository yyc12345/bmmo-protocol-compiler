bpc 1;
namespace my.test.name;

// annotation test
/* annotation test */

alias tests_alias_int uint32;
alias tests_alias_float float;
alias tests_alias_string string;
alias tests_alias_dup_error uint8;
alias tests_alias_dup_error uint8;

enum uint32 tests_enum {
	entry
}
enum int32 tests_enum_negative {
	entry1 = -114514,
	entry2
}
enum uint64 tests_enum_limit_uint {
	entry1 = 1,
	entry2 = 18446744073709551615,
	entry3
}
enum int64 tests_enum_limit_int {
	entry1 = 1,
	entry2 = -9223372036854775807,
	entry3
}
enum int8 tests_enum_limit_int8 {
	entry1 = 1,
	entry2 = -128,
	entry3
}

narrow struct tests_struct_blank {}
narrow struct tests_struct {
	uint32 data1;
	float data2;
	string data3;
	tests_alias_int data4;
	tests_alias_float data5;
	tests_alias_string data6;
	tests_struct_blank data7;
	tests_enum data8;
}
narrow struct tests_struct_list {
	uint32[]data1;
	float[] data2;
	string[] data3;
	tests_alias_int[] data4;
	tests_alias_float[] data5;
	tests_alias_string[] data6;
	tests_struct_blank[] data7;
	tests_enum[] data8;
	
	uint32 [ ] data9;
}
narrow struct tests_struct_tuple {
	uint32[8]data1;
	float[8] data2;
	string[8] data3;
	tests_alias_int[8] data4;
	tests_alias_float[8] data5;
	tests_alias_string[8] data6;
	tests_struct_blank[8] data7;
	tests_enum[8] data8;
	
	uint32 [ 8 ] data9;
}
narrow struct tests_struct_align {
	uint32 data1#4;
	float data2#4;
	string data3#4;
	tests_alias_int data4#4;
	tests_alias_float data5#4;
	tests_alias_string data6#4;
	tests_struct_blank data7#4;
	tests_enum data8#4;
	
	uint32 data9 # 4 ;
}
narrow struct tests_struct_hybrid {
	uint32[8] data1#4;
	uint32[] data2#4;
	float[8] data3#4;
	float[] data4#4;
	string[8] data5#4;
	string[] data6#4;
}
natural struct tests_struct_natural1 {
	uint32 data1;
	uint32[8] data2;
	float data3;
	float[8] data4;
	tests_alias_int data5;
	tests_alias_int[8] data6;
	tests_alias_float data7;
	tests_alias_float[8] data8;
}
natural struct tests_struct_natural2 {
	uint32 data1;
	uint32[8] data2;
	float data3;
	float[8] data4;
	tests_alias_int data5;
	tests_alias_int[8] data6;
	tests_alias_float data7;
	tests_alias_float[8] data8;
	tests_struct_natural1 data9;
	tests_struct_natural1[8] data10;
}
natural struct tests_struct_natural_align1 {
	int8 data1;
	int32 data2;
	int8[5] data3;
	int64 data4;
}
natural struct tests_struct_natural_align2 {
	int8 data1;
	int32 data2;
	int8[5] data3;
	int64 data4;
	int8[3] data5;
	tests_struct_natural_align1 data6;
}
struct tests_struct_nospec_natural1 {
	int8 data1;
	int8[2] data2;
	tests_struct_natural1 data3;
}
struct tests_struct_nospec_natural2 {
	int8 data1;
	int8[2] data2;
	tests_struct_nospec_natural1 data3;
}
struct tests_struct_nospec_narrow1 {
	int8[] data1;
}
struct tests_struct_nospec_narrow2 {
	string data1;
}
struct tests_struct_nospec_narrow3 {
	tests_struct_blank data1;
}
struct tests_struct_nospec_narrow4 {
	tests_struct_nospec_narrow1 data1;
}
natural struct tests_struct_natural_warning {
	int8 data1#2;
}

reliable narrow msg tests_msg1 {
	int8 data1;
}
unreliable narrow msg tests_msg2 {
	int8 data1;
}
msg tests_nospec_msg {
	int8 data1;
}
