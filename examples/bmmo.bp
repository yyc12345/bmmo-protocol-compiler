bpc 1;
language python;
namespace bmmo.data_struct;

// assume:
// bpbool -> uint8
// bpint -> int32
alias valvegns_player_uuid uint32;
alias bpbool uint8;
alias bpint int32;

// ============= basic msg chapter

msg none_msg : reliable {} // not used

msg login_request_msg : reliable {
    string nickname;
}

struct login_accepted {
    string nickname;
    valvegns_player_uuid uuid;
}
msg login_accepted_msg : reliable {
    login_accepted data list;
}

msg login_denied_msg : reliable {}

msg player_disconnected_msg : reliable {
    valvegns_player_uuid player_id;
}

msg player_connected_msg : reliable {
    valvegns_player_uuid player_id;
    string nickname;
}

msg ping_msg : reliable {} // not used

struct vx_position {
    float x,y,z;
}
struct vx_quaternion {
    float x,y,z,w;
}
struct ball_state {
    uint32 type;
    vx_position position;
    vx_quaternion rotation;
}
msg ball_state_msg : unreliable {
    ball_state data;
}

struct owned_ball_state {
    ball_state state;
    valvegns_player_uuid player_id;
}
msg owned_ball_state_msg : unreliable {
    owned_ball_state data;
}

msg keyboard_input_msg : reliable {} // not used

msg chat_msg : reliable {
    valvegns_player_uuid player_id;
    string chat_content;
}

msg level_finish_msg : reliable {
    valvegns_player_uuid player_id;
    int32 points,lifes,lifeBonus,levelBonus;
    float timeElapsed;

    int32 startPoints,currentLevel;
    bpbool cheated;
}

// ============= v3.1 cheat update chapter

enum bmmo_stage : uint8 {
    Alpha,
    Beta,
    RC,
    Release
}
struct bmmo_version {
    uint8 major;
    uint8 minor;
    uint8 subminor;
    bmmo_stage stage;
    uint8 build;
}
msg login_request_v2_msg : reliable {
    bmmo_version version;
    string nickname;
    uint8 cheated;
}

struct login_accepted_v2 {
    valvegns_player_uuid uuid;
    string nickname;
    uint8 cheated;
}
msg login_accepted_v2_msg : reliable {
    login_accepted_v2 data list;
}

msg player_connected_v2_msg : reliable {
    login_accepted_v2 data;
}

struct cheat_state {
    uint8 cheated;
    uint8 notify;
}
msg cheat_state_msg : reliable {
    cheat_state data;
}

msg owned_cheat_state_msg : reliable {
    cheat_state state align 2;
    valvegns_player_uuid player_id;
}

msg cheat_toggle_msg : reliable {
    cheat_state data;
}

msg owned_cheat_toggle_msg : reliable {
    cheat_state state align 2;
    valvegns_player_uuid player_id;
}

// ============= v3.2 kick update chapter

msg kick_request_msg : reliable {
    string kicked_player_name;
    valvegns_player_uuid operator_player;
    string reason;
}

msg player_kicked_msg : reliable {
    string kicked_player_name;
    string executor_name;
    string reason;
    uint8 crashed;
}

// ============= v3.2 bandwidth reduce & map hash update chapter

msg owned_ball_state_v2_msg : reliable {
    owned_ball_state data list;
}

msg login_request_v3_msg : reliable {
    bmmo_version version;
    string nickname;
    uint8 cheated;
    uint8 uuid tuple 16;
}

enum map_type : uint8 {
    UnknownType,
    Original,
    Custom
}
struct map {
    string map_name;
    map_type bmap_type;
    uint8 map_md5 tuple 16;
    uint32 map_level;
}
msg level_finish_v2_msg : reliable {
    valvegns_player_uuid player_id;
    int32 points,lifes,lifeBonus,levelBonus;
    float timeElapsed;

    int32 startPoints;
    bpbool cheated;
    
    map bmap;
    bpint rank;
}

// ============= v3.2 op permission update chapter

enum action_denied_reason : uint8 {
    UnknownReason,
    NoPermission,
    InvalidAction,
    InvalidTarget,
    TargetNotFound
}
struct action_denied {
    action_denied_reason reason;
}
msg action_denied_msg : reliable {
    action_denied data;
}

msg op_state_msg : reliable {
    uint8 op;
}

// ============= v3.2 sync-restart update chapter

enum countdown_type: uint8 {
    CountdownType_Go,
    CountdownType_1,
    CountdownType_2,
    CountdownType_3,
    CountdownType_Unknown
}
msg countdown_msg : reliable {
    countdown_type cd_type;
    valvegns_player_uuid sender;
    map for_map;
    uint8 restart_level;
    uint8 force_restart;
}
