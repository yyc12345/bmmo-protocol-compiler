bpc 1;
namespace Bmmo.DataStructs;

// assume:
// bpbool -> uint8
// bpint -> int32
alias gnsid uint32;
alias bpbool uint8;
alias bpint int32;

// ============= basic msg chapter

narrow reliable msg none_msg {} // not used

narrow reliable msg login_request_msg {
    string nickname;
}

narrow struct player_status {
    string nickname;
    gnsid uuid;
}
narrow reliable msg login_accepted_msg {
    player_status[] pairs;
}

enum uint8 action_type {
    Unknown,
    LoginDenied,
    CurrentMapQuery,
    FatalError // client encountered a fatal error; end connection from server
}

natural reliable msg simple_action_msg {
	action_type action;
}

natural reliable msg player_disconnected_msg {
    gnsid connection_id;
}

narrow reliable msg player_connected_msg {
    gnsid connection_id;
    string name;
}

narrow reliable msg ping_msg {} // not used

natural struct vx_position {
    float x, y, z;
}
natural struct vx_quaternion {
    float x, y, z, w;
}
natural struct ball_state {
    uint32 type;
    vx_position position;
    vx_quaternion rotation;
}
natural unreliable msg ball_state_msg {
    ball_state data;
}

natural struct owned_ball_state {
    ball_state state;
    gnsid player_id;
}
natural unreliable msg owned_ball_state_msg {
    owned_ball_state data;
}

narrow reliable msg keyboard_input_msg {} // not used

narrow struct chat_body {
    gnsid someone_id;
    string chat_content;
}
narrow reliable msg chat_msg {
    chat_body data;
}

natural reliable msg level_finish_msg {
    gnsid player_id;
    int32 points, lifes, lifeBonus, levelBonus;
    float timeElapsed;

    int32 startPoints, currentLevel;
    bpbool cheated;
}

// ============= v3.1 cheat update chapter

enum uint8 bmmo_stage {
    Alpha,
    Beta,
    RC,
    Release
}
natural struct version_t {
    uint8 major;
    uint8 minor;
    uint8 subminor;
    bmmo_stage stage;
    uint8 build;
}
narrow reliable msg login_request_v2_msg {
    version_t version;
    string nickname;
    uint8 cheated;
}

narrow struct player_status_v2 {
    gnsid uuid;
    string nickname;
    uint8 cheated;
}
narrow reliable msg login_accepted_v2_msg {
    player_status_v2[] players;
}

narrow reliable msg player_connected_v2_msg {
    player_status_v2 player;
}

natural struct cheat_state {
    uint8 cheated;
    uint8 notify;
}
natural reliable msg cheat_state_msg {
    cheat_state data;
}

natural reliable msg owned_cheat_state_msg {
    cheat_state state;
    gnsid player_id;
}

natural reliable msg cheat_toggle_msg {
    cheat_state data;
}

natural reliable msg owned_cheat_toggle_msg {
    cheat_state state;
    gnsid player_id;
}

// ============= v3.2 kick update chapter

narrow reliable msg kick_request_msg {
    string kicked_player_name;
    gnsid operator_player;
    string reason;
}

enum uint8 crash_type {
    NoCrash = 0, // not crashed
    Crash = 1,
    FatalError = 2
}

narrow reliable msg player_kicked_msg {
    string kicked_player_name;
    string executor_name;
    string reason;
    uint8 crashed;
}

// ============= v3.2 bandwidth reduce & map hash update & identity system chapter

narrow unreliable msg owned_ball_state_v2_msg {
    owned_ball_state[] data;
}

narrow reliable msg login_request_v3_msg {
    version_t version;
    string nickname;
    uint8 cheated;
    uint8[16] uuid;
}

enum uint8 map_type {
    Unknown,
    OriginalLevel,
    CustomMap
}
natural struct map {
    map_type type;
    uint8[16] md5;
    uint32 level;
}
narrow struct named_map {
    string name;
    map_type type;
    uint8[16] md5;
    uint32 level;
}
natural reliable msg level_finish_v2_msg {
    gnsid player_id;
    int32 points,lifes,lifeBonus,levelBonus;
    float timeElapsed;

    int32 startPoints;
    bpbool cheated;
    
    map bmap;
    int32 rank;
}

// ============= v3.2 op permission update chapter

enum uint8 deny_reason {
    Unknown,
    NoPermission,
    InvalidAction,
    InvalidTarget,
    TargetNotFound,
    PlayerMuted
}
natural reliable msg action_denied_msg {
    deny_reason reason;
}

natural reliable msg op_state_msg {
    uint8 op;
}

// ============= v3.2 sync-restart update & basic context chapter

enum uint8 countdown_type {
    Go = 0,
    Countdown_1 = 1,
    Countdown_2 = 2,
    Countdown_3 = 3,
    Ready = 4,
    ConfirmReady = 5,
    Unknown = 255
}
natural reliable msg countdown_msg {
    countdown_type cd_type;
    gnsid sender;
    map for_map;
    uint8 restart_level;
    uint8 force_restart;
}

natural reliable msg did_not_finish_msg {
    gnsid player_id;
    uint8 cheated;
    map in_map;
    int32 sector;
}

// ============= v3 map in detail chapter

narrow reliable msg map_names_msg {
    uint8[16] md5;
    string name;
}

// used in messages sent by server.
narrow reliable msg plain_text_msg {
    string text_content;
}

enum uint8 state_type {
    NoState, 
    Announcement, 
    EnteringMap
}
natural struct current_map_state {
    gnsid player_id;
    map in_map;
    int32 sector;
    state_type type;
}
natural reliable msg current_map_msg {
    current_map_state state;
}

narrow reliable msg hash_data_msg {
    string data_name;
    uint8[16] md5;
}

// ============= v3.3 extrapolation chapter

// i create a alias as the implementation of bmmo timestamp.
// bp do not have align barrier because it always use x86 align strategy.
// in x86 align, both uint32 and uint64 have the same align, 4 bytes.
alias timestamp_t uint64;

natural struct timed_ball_state {
    ball_state inherited;
    timestamp_t timestamp;
}
natural unreliable msg timed_ball_state_msg {
    timed_ball_state data;
}

natural struct owned_timed_ball_state {
    timed_ball_state state;
    gnsid player_id;
}
natural struct owned_timestamp {
    timestamp_t timestamp;
    gnsid player_id;
}
narrow unreliable msg owned_timed_ball_state_msg {
    owned_timed_ball_state[] balls;
    owned_timestamp[] unchaged_balls;
}

natural reliable msg timestamp_msg {
    timestamp_t timestamp;
}

// ============= v3 chat & notification & anticheat improvements chapter

narrow reliable msg private_chat_msg {
    chat_body data;
}

natural reliable msg player_ready_msg {
    gnsid player_id;
    uint32 count;
    uint8 ready;
}

narrow reliable msg important_notification_msg {
    chat_body data;
}

narrow struct mod_pair {
    string mod_name;
    string mod_version;
}
narrow reliable msg mod_list_msg {
    mod_pair[] pairs;
}

narrow struct info_with_title {
    string title;
    string text_content;
}
narrow reliable msg popup_box_msg {
    info_with_title body;
}

// ============= v3 sector context chapter

natural reliable msg current_sector_msg {
    gnsid player_id;
    int32 sector;
}

narrow struct player_status_v3 {
    gnsid uuid;
    string nickname;
    uint8 cheated;
    map in_map;
    int32 sector;
}

narrow reliable msg login_accepted_v3_msg {
    player_status_v3[] online_players;
}

// ============= v3 notification improvements chapter

narrow reliable msg permanent_notification_msg {
    info_with_title body;
}

narrow struct wave_sound_pair {
    uint16 freq_hz;
    uint32 duration_ms;
}
narrow reliable msg sound_data_msg {
    string caption;
    wave_sound_pair[] wave_desc;
}

// i don't know what this fucking message do.
narrow reliable msg public_warning_msg {
    string text_content;
}
