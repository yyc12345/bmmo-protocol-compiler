// specific bmmo_protocol_compiler version
// not matched version will abort the process of parsing
bpc 1;

// specific output language
// supported language: csharp, python, cpp
language python;

// namespace property
// only valid for csharp and cpp
// but this is essential field. you should fill it even if you don't need it.
namespace bmmo.data_struct;

// bp file support line-comment

/*
bp file
also support block-comment
*/

/*
Bpc supported basic type:

* float
* double
* int8
* int16
* int32
* int64
* uint8
* uint16
* uint32
* uint64
* string
*/

/*
===============   Alias section: ===============
You can give any alias to any *basic type* with following syntax:
`alias YOUR_NAME BASIC_TYPE;`
There are some examples:
*/
alias my_type uint32
alias simple_string string

/*
===============   Defination section: ===============
You can define enum, struct or msg in there now.
Please note their order to prevent undefined token problem.
*/

/*
===== Define a enum with following syntax: =====
enum ENUM_NAME : BASIC_TYPE {
    enter your enum entries in here with comma to split them...
}

Please note that `BASIC_TYPE` only can be:
* int8
* int16
* int32
* int64
* uint8
* uint16
* uint32
* uint64
following basic couldn't be used as enum type:
* float
* double
* string

Alias can not be specific as enum type, 
even if this alias point to a basic type accepted by enum.

*/
enum weather : uint8 {
    Sunday,
    Cloudy,
    Raining
}

/*
===== Define a struct with following syntax: =====
struct STRUCT_NAME {
    enter your struct entries...
}

Each struct entries following next syntax:
BASIC_TYPE ENTRY_NAME1, ENTRY_NAME2, ENTRY_NAME3;

Each entry can have array suffix:
BASIC_TYPE ENTRY_NAME tuple 16;
BASIC_TYPE ENTRY_NAME list;
BASIC_TYPE ENTRY_NAME1, ENTRY_NAME2 tuple 16;
BASIC_TYPE ENTRY_NAME1, ENTRY_NAME2 list;

Just like python, `tuple` reference a static array. The number following `tuple` indicate its length.
`list` reference a dynamic array and its length will be indicated by a uint32_t located at the head of this list.
And please notice the 3rd and 4th statements, it mean that ENTRY_NAME1 and ENTRY_NAME2 both are array.

In struct, `BASIC_TYPE` do not have any limitation, not like enum.

Each entry also can use other struct, enum and alias type, just like following syntax:
ENUM_NAME ENTRY_NAME;
STRUCT_NAME ENTRY_NAME;
ALIAS_NAME ENTRY_NAME;
*/
struct vx_position {
    float x,y,z;
}
struct vx_quaternion {
    float x,y,z,w;
}
struct ball_state {
    uint32 type;
    vx_position position;
    vx_quaternion rotation;
}

/*
===== Define a msg: =====
msg is very very similar than struct.
Everything which can be used in struct, also can be used in msg.
The only different between msg and struct is that:
bpc will distribute a unique index for each msg to and organize them at the end of output. 
bpc will group these index as a enum called `opcode`.
bpc will never distribute any index for struct.
*/
msg player_kicked_msg {
    string kicked_player_name;
    string executor_name;
    string reason;
    uint8 crashed;
}
